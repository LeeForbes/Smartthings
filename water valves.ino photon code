//---------------------------------------------------------------------------
// Variables and Pin definitions
//---------------------------------------------------------------------------

// pool assigned flow sensor1
// Sensor 2 not assigned

// Other Variable types
volatile unsigned int TPulseCount1 = 0;
volatile unsigned int TPulseCount2 = 0;

// pulses per liter of the flow sensorsw
const float pulsesPerLiter = 477;

// Define Pins
#define WATER_SENSOR1	D5	
#define WATER_SENSOR2	D4	
#define poolon          D0
#define misteron        D1
#define future1         D2
#define future2         D3

// Variable Define Intergers
int totalg2 = 0;
int totalg1 = 0;
int previousg1 = 0;
int voltprotect = 0;
int autofill = 0;
float poolLevel = 0;
int pfull = 90;   //previously 110 before pool robot and 95 before rewire 85 before i removed grommet
int pLow = 160;
float gpmm = 13;  //previously 8.33 
int fillPercent = 0;
int calcfillamount = 0;

//-----------------------------------------------------------------------------
// Water Sensor interrupts
//-----------------------------------------------------------------------------

// Increment the water pulse counter for misters
void WaterPulseCounter1(void)
{
	TPulseCount1++;
}

// Increment the water pulse counter for pool
void WaterPulseCounter2(void)
{
	TPulseCount2++;
}

//-------------------------------------------------------------------------------
// Setup
//-------------------------------------------------------------------------------
void setup()
{
// Cloud Based Variables  
  Particle.variable("totalg1", totalg1);
  Particle.variable("totalg2", totalg2);
// Set output pins for relays  
  pinMode(misteron, OUTPUT);
  pinMode(poolon, OUTPUT);
// set pin for voltage detector
  pinMode(D6, INPUT_PULLDOWN);
  pinMode(D7, OUTPUT);
// Set pins to high for all relays off  
  digitalWrite(misteron, HIGH);
  digitalWrite(poolon, HIGH);
  digitalWrite(future1, HIGH);
  digitalWrite(future2, HIGH);
  
// Set ground pins for volatage detector
  digitalWrite(D7, LOW);
// Set Digital pin WATER_SENSOR_PINT to INPUT mode and set
// interrupt vector (water flow sensor) for FALLING edge interrupt
  pinMode(WATER_SENSOR1, INPUT);
  pinMode(WATER_SENSOR2, INPUT);
  attachInterrupt(WATER_SENSOR1, WaterPulseCounter1, FALLING);
  attachInterrupt(WATER_SENSOR2, WaterPulseCounter2, FALLING);
// Cloud Based Functions
  Particle.function("misteron", misteronfunc);
  Particle.function("poolon", poolonfunc);
// Cloud Subscriptions
  Particle.subscribe("waterlevel", levelHandler, MY_DEVICES);
// Cloud Variables 
  Particle.variable("PoolLevel", fillPercent);
  Particle.variable("CalcFill", calcfillamount);
}

//--------------------------------------------------------------------------------
// Loop Code
//--------------------------------------------------------------------------------

void loop()
{
// Variable Calculations For  Total Gallons  
  totalg1 = ((TPulseCount1 / pulsesPerLiter)) / 3.79;
  totalg2 = ((TPulseCount2 / pulsesPerLiter)) / 3.79;

// checks if gallons changed to cue update in smartthings
  if (totalg1 != previousg1){
    Particle.publish("gallonspool", "refresh", PRIVATE);
    previousg1 = totalg1;
    }
  
// pool fill auto shutoff  
  if (totalg1 >= calcfillamount && autofill == 1)  // pool auto shutoff at fill amount
  {
    digitalWrite(poolon, HIGH);
    TPulseCount1 = 0;
    autofill = 0;
    calcfillamount = 0;
    fillPercent = 100;
    Particle.publish("autoshutoff", "on", PRIVATE);
  }
// Power Loss On Battery POwer shutiff valves sens message wait and send message when power is restored
int volt = digitalRead(D6); 
  if (volt == LOW && voltprotect == 0)
  {
      Particle.publish("powerloss", "yes", PRIVATE);
      voltprotect = 1;
      digitalWrite(poolon, HIGH);
      digitalWrite(misteron, HIGH);
      digitalWrite(future1, HIGH);
      digitalWrite(future2, HIGH); 
  }
  if (volt == HIGH && voltprotect == 1)
  {
      Particle.publish("powerrestored", "yes", PRIVATE);
      voltprotect = 0;
  }
}

//---------------------------------------------------------------------------------
// Cloud Based Controls
//---------------------------------------------------------------------------------

int misteronfunc(String command)
{
  if (command == "1") 
    {
    digitalWrite(misteron, LOW);
    return 1;
    } 
  if (command == "0")
    {               
   digitalWrite(misteron, HIGH);
    return 0;
    }
}

int poolonfunc(String command)
{
  if (command == "1") 
    {   
    TPulseCount1 = 0;
    digitalWrite(poolon, LOW);
    return 1;
    } 
  else 
    {               
    digitalWrite(poolon, HIGH);
    TPulseCount1 = 0;
    return 0;
    }
}


// Level Handler
void levelHandler(const char *event, const char *data)
{
poolLevel = atof(data);
fillPercent = ((((pLow - poolLevel) / (pLow - pfull)) * 100));
calcfillamount = ((poolLevel - pfull) * gpmm);
if (calcfillamount >= 60 && calcfillamount <= 200)
{
    autofill = 1;
    digitalWrite(poolon, LOW);
    Particle.publish("poolautofill", "on", PRIVATE);
}
}
